// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Generated bindings
class Bindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Bindings(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Bindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void nt_store_dart_post_cobject(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _nt_store_dart_post_cobject(
      ptr,
    );
  }

  late final _nt_store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'nt_store_dart_post_cobject');
  late final _nt_store_dart_post_cobject = _nt_store_dart_post_cobjectPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> nt_cstring_to_void_ptr(
    ffi.Pointer<ffi.Char> ptr,
  ) {
    return _nt_cstring_to_void_ptr(
      ptr,
    );
  }

  late final _nt_cstring_to_void_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Char>)>>('nt_cstring_to_void_ptr');
  late final _nt_cstring_to_void_ptr = _nt_cstring_to_void_ptrPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> nt_void_ptr_to_c_str(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _nt_void_ptr_to_c_str(
      ptr,
    );
  }

  late final _nt_void_ptr_to_c_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('nt_void_ptr_to_c_str');
  late final _nt_void_ptr_to_c_str = _nt_void_ptr_to_c_strPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  void nt_free_cstring(
    ffi.Pointer<ffi.Char> ptr,
  ) {
    return _nt_free_cstring(
      ptr,
    );
  }

  late final _nt_free_cstringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'nt_free_cstring');
  late final _nt_free_cstring =
      _nt_free_cstringPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void nt_init_logging() {
    return _nt_init_logging();
  }

  late final _nt_init_loggingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('nt_init_logging');
  late final _nt_init_logging =
      _nt_init_loggingPtr.asFunction<void Function()>();

  void nt_channel_err_free_ptr(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _nt_channel_err_free_ptr(
      ptr,
    );
  }

  late final _nt_channel_err_free_ptrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'nt_channel_err_free_ptr');
  late final _nt_channel_err_free_ptr = _nt_channel_err_free_ptrPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void nt_channel_option_free_ptr(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _nt_channel_option_free_ptr(
      ptr,
    );
  }

  late final _nt_channel_option_free_ptrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'nt_channel_option_free_ptr');
  late final _nt_channel_option_free_ptr = _nt_channel_option_free_ptrPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void nt_channel_result_option_free_ptr(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _nt_channel_result_option_free_ptr(
      ptr,
    );
  }

  late final _nt_channel_result_option_free_ptrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'nt_channel_result_option_free_ptr');
  late final _nt_channel_result_option_free_ptr =
      _nt_channel_result_option_free_ptrPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void nt_channel_result_unit_free_ptr(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _nt_channel_result_unit_free_ptr(
      ptr,
    );
  }

  late final _nt_channel_result_unit_free_ptrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'nt_channel_result_unit_free_ptr');
  late final _nt_channel_result_unit_free_ptr =
      _nt_channel_result_unit_free_ptrPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void nt_accounts_storage_create(
    int result_port,
    ffi.Pointer<ffi.Void> storage,
  ) {
    return _nt_accounts_storage_create(
      result_port,
      storage,
    );
  }

  late final _nt_accounts_storage_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.LongLong,
              ffi.Pointer<ffi.Void>)>>('nt_accounts_storage_create');
  late final _nt_accounts_storage_create = _nt_accounts_storage_createPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void nt_accounts_storage_entries(
    int result_port,
    ffi.Pointer<ffi.Void> accounts_storage,
  ) {
    return _nt_accounts_storage_entries(
      result_port,
      accounts_storage,
    );
  }

  late final _nt_accounts_storage_entriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.LongLong,
              ffi.Pointer<ffi.Void>)>>('nt_accounts_storage_entries');
  late final _nt_accounts_storage_entries = _nt_accounts_storage_entriesPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void nt_accounts_storage_add_account(
    int result_port,
    ffi.Pointer<ffi.Void> accounts_storage,
    ffi.Pointer<ffi.Char> new_account,
  ) {
    return _nt_accounts_storage_add_account(
      result_port,
      accounts_storage,
      new_account,
    );
  }

  late final _nt_accounts_storage_add_accountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.LongLong, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('nt_accounts_storage_add_account');
  late final _nt_accounts_storage_add_account =
      _nt_accounts_storage_add_accountPtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  void nt_accounts_storage_add_accounts(
    int result_port,
    ffi.Pointer<ffi.Void> accounts_storage,
    ffi.Pointer<ffi.Char> new_accounts,
  ) {
    return _nt_accounts_storage_add_accounts(
      result_port,
      accounts_storage,
      new_accounts,
    );
  }

  late final _nt_accounts_storage_add_accountsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.LongLong, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('nt_accounts_storage_add_accounts');
  late final _nt_accounts_storage_add_accounts =
      _nt_accounts_storage_add_accountsPtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  void nt_accounts_storage_rename_account(
    int result_port,
    ffi.Pointer<ffi.Void> accounts_storage,
    ffi.Pointer<ffi.Char> account,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _nt_accounts_storage_rename_account(
      result_port,
      accounts_storage,
      account,
      name,
    );
  }

  late final _nt_accounts_storage_rename_accountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nt_accounts_storage_rename_account');
  late final _nt_accounts_storage_rename_account =
      _nt_accounts_storage_rename_accountPtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  void nt_accounts_storage_add_token_wallet(
    int result_port,
    ffi.Pointer<ffi.Void> accounts_storage,
    ffi.Pointer<ffi.Char> account,
    ffi.Pointer<ffi.Char> network_group,
    ffi.Pointer<ffi.Char> root_token_contract,
  ) {
    return _nt_accounts_storage_add_token_wallet(
      result_port,
      accounts_storage,
      account,
      network_group,
      root_token_contract,
    );
  }

  late final _nt_accounts_storage_add_token_walletPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nt_accounts_storage_add_token_wallet');
  late final _nt_accounts_storage_add_token_wallet =
      _nt_accounts_storage_add_token_walletPtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void nt_accounts_storage_remove_token_wallet(
    int result_port,
    ffi.Pointer<ffi.Void> accounts_storage,
    ffi.Pointer<ffi.Char> account,
    ffi.Pointer<ffi.Char> network_group,
    ffi.Pointer<ffi.Char> root_token_contract,
  ) {
    return _nt_accounts_storage_remove_token_wallet(
      result_port,
      accounts_storage,
      account,
      network_group,
      root_token_contract,
    );
  }

  late final _nt_accounts_storage_remove_token_walletPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.LongLong,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>)>>(
      'nt_accounts_storage_remove_token_wallet');
  late final _nt_accounts_storage_remove_token_wallet =
      _nt_accounts_storage_remove_token_walletPtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void nt_accounts_storage_remove_account(
    int result_port,
    ffi.Pointer<ffi.Void> accounts_storage,
    ffi.Pointer<ffi.Char> account,
  ) {
    return _nt_accounts_storage_remove_account(
      result_port,
      accounts_storage,
      account,
    );
  }

  late final _nt_accounts_storage_remove_accountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.LongLong, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('nt_accounts_storage_remove_account');
  late final _nt_accounts_storage_remove_account =
      _nt_accounts_storage_remove_accountPtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  void nt_accounts_storage_remove_accounts(
    int result_port,
    ffi.Pointer<ffi.Void> accounts_storage,
    ffi.Pointer<ffi.Char> accounts,
  ) {
    return _nt_accounts_storage_remove_accounts(
      result_port,
      accounts_storage,
      accounts,
    );
  }

  late final _nt_accounts_storage_remove_accountsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.LongLong, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('nt_accounts_storage_remove_accounts');
  late final _nt_accounts_storage_remove_accounts =
      _nt_accounts_storage_remove_accountsPtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  void nt_accounts_storage_clear(
    int result_port,
    ffi.Pointer<ffi.Void> accounts_storage,
  ) {
    return _nt_accounts_storage_clear(
      result_port,
      accounts_storage,
    );
  }

  late final _nt_accounts_storage_clearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.LongLong,
              ffi.Pointer<ffi.Void>)>>('nt_accounts_storage_clear');
  late final _nt_accounts_storage_clear = _nt_accounts_storage_clearPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void nt_accounts_storage_reload(
    int result_port,
    ffi.Pointer<ffi.Void> accounts_storage,
  ) {
    return _nt_accounts_storage_reload(
      result_port,
      accounts_storage,
    );
  }

  late final _nt_accounts_storage_reloadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.LongLong,
              ffi.Pointer<ffi.Void>)>>('nt_accounts_storage_reload');
  late final _nt_accounts_storage_reload = _nt_accounts_storage_reloadPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> nt_accounts_storage_verify_data(
    ffi.Pointer<ffi.Char> data,
  ) {
    return _nt_accounts_storage_verify_data(
      data,
    );
  }

  late final _nt_accounts_storage_verify_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('nt_accounts_storage_verify_data');
  late final _nt_accounts_storage_verify_data =
      _nt_accounts_storage_verify_dataPtr
          .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void nt_accounts_storage_free_ptr(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _nt_accounts_storage_free_ptr(
      ptr,
    );
  }

  late final _nt_accounts_storage_free_ptrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'nt_accounts_storage_free_ptr');
  late final _nt_accounts_storage_free_ptr = _nt_accounts_storage_free_ptrPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void nt_generic_contract_subscribe(
    int result_port,
    int on_message_sent_port,
    int on_message_expired_port,
    int on_state_changed_port,
    int on_transactions_found_port,
    ffi.Pointer<ffi.Void> transport,
    ffi.Pointer<ffi.Char> transport_type,
    ffi.Pointer<ffi.Char> address,
    int preload_transactions,
  ) {
    return _nt_generic_contract_subscribe(
      result_port,
      on_message_sent_port,
      on_message_expired_port,
      on_state_changed_port,
      on_transactions_found_port,
      transport,
      transport_type,
      address,
      preload_transactions,
    );
  }

  late final _nt_generic_contract_subscribePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong,
              ffi.LongLong,
              ffi.LongLong,
              ffi.LongLong,
              ffi.LongLong,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('nt_generic_contract_subscribe');
  late final _nt_generic_contract_subscribe =
      _nt_generic_contract_subscribePtr.asFunction<
          void Function(int, int, int, int, int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void nt_generic_contract_address(
    int result_port,
    ffi.Pointer<ffi.Void> generic_contract,
  ) {
    return _nt_generic_contract_address(
      result_port,
      generic_contract,
    );
  }

  late final _nt_generic_contract_addressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.LongLong,
              ffi.Pointer<ffi.Void>)>>('nt_generic_contract_address');
  late final _nt_generic_contract_address = _nt_generic_contract_addressPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void nt_generic_contract_contract_state(
    int result_port,
    ffi.Pointer<ffi.Void> generic_contract,
  ) {
    return _nt_generic_contract_contract_state(
      result_port,
      generic_contract,
    );
  }

  late final _nt_generic_contract_contract_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.LongLong,
              ffi.Pointer<ffi.Void>)>>('nt_generic_contract_contract_state');
  late final _nt_generic_contract_contract_state =
      _nt_generic_contract_contract_statePtr
          .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void nt_generic_contract_pending_transactions(
    int result_port,
    ffi.Pointer<ffi.Void> generic_contract,
  ) {
    return _nt_generic_contract_pending_transactions(
      result_port,
      generic_contract,
    );
  }

  late final _nt_generic_contract_pending_transactionsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.LongLong, ffi.Pointer<ffi.Void>)>>(
      'nt_generic_contract_pending_transactions');
  late final _nt_generic_contract_pending_transactions =
      _nt_generic_contract_pending_transactionsPtr
          .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void nt_generic_contract_polling_method(
    int result_port,
    ffi.Pointer<ffi.Void> generic_contract,
  ) {
    return _nt_generic_contract_polling_method(
      result_port,
      generic_contract,
    );
  }

  late final _nt_generic_contract_polling_methodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.LongLong,
              ffi.Pointer<ffi.Void>)>>('nt_generic_contract_polling_method');
  late final _nt_generic_contract_polling_method =
      _nt_generic_contract_polling_methodPtr
          .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void nt_generic_contract_estimate_fees(
    int result_port,
    ffi.Pointer<ffi.Void> generic_contract,
    ffi.Pointer<ffi.Char> signed_message,
  ) {
    return _nt_generic_contract_estimate_fees(
      result_port,
      generic_contract,
      signed_message,
    );
  }

  late final _nt_generic_contract_estimate_feesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.LongLong, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('nt_generic_contract_estimate_fees');
  late final _nt_generic_contract_estimate_fees =
      _nt_generic_contract_estimate_feesPtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  void nt_generic_contract_send(
    int result_port,
    ffi.Pointer<ffi.Void> generic_contract,
    ffi.Pointer<ffi.Char> signed_message,
  ) {
    return _nt_generic_contract_send(
      result_port,
      generic_contract,
      signed_message,
    );
  }

  late final _nt_generic_contract_sendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.LongLong, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('nt_generic_contract_send');
  late final _nt_generic_contract_send =
      _nt_generic_contract_sendPtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  void nt_generic_contract_execute_transaction_locally(
    int result_port,
    ffi.Pointer<ffi.Void> generic_contract,
    ffi.Pointer<ffi.Char> signed_message,
    ffi.Pointer<ffi.Char> options,
  ) {
    return _nt_generic_contract_execute_transaction_locally(
      result_port,
      generic_contract,
      signed_message,
      options,
    );
  }

  late final _nt_generic_contract_execute_transaction_locallyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.LongLong, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>(
      'nt_generic_contract_execute_transaction_locally');
  late final _nt_generic_contract_execute_transaction_locally =
      _nt_generic_contract_execute_transaction_locallyPtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  void nt_generic_contract_refresh(
    int result_port,
    ffi.Pointer<ffi.Void> generic_contract,
  ) {
    return _nt_generic_contract_refresh(
      result_port,
      generic_contract,
    );
  }

  late final _nt_generic_contract_refreshPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.LongLong,
              ffi.Pointer<ffi.Void>)>>('nt_generic_contract_refresh');
  late final _nt_generic_contract_refresh = _nt_generic_contract_refreshPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void nt_generic_contract_preload_transactions(
    int result_port,
    ffi.Pointer<ffi.Void> generic_contract,
    ffi.Pointer<ffi.Char> from_lt,
  ) {
    return _nt_generic_contract_preload_transactions(
      result_port,
      generic_contract,
      from_lt,
    );
  }

  late final _nt_generic_contract_preload_transactionsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.LongLong, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>>(
      'nt_generic_contract_preload_transactions');
  late final _nt_generic_contract_preload_transactions =
      _nt_generic_contract_preload_transactionsPtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  void nt_generic_contract_handle_block(
    int result_port,
    ffi.Pointer<ffi.Void> generic_contract,
    ffi.Pointer<ffi.Char> block,
  ) {
    return _nt_generic_contract_handle_block(
      result_port,
      generic_contract,
      block,
    );
  }

  late final _nt_generic_contract_handle_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.LongLong, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('nt_generic_contract_handle_block');
  late final _nt_generic_contract_handle_block =
      _nt_generic_contract_handle_blockPtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  void nt_generic_contract_free_ptr(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _nt_generic_contract_free_ptr(
      ptr,
    );
  }

  late final _nt_generic_contract_free_ptrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'nt_generic_contract_free_ptr');
  late final _nt_generic_contract_free_ptr = _nt_generic_contract_free_ptrPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void nt_keystore_create(
    int result_port,
    ffi.Pointer<ffi.Void> storage,
    ffi.Pointer<ffi.Void> connection,
    ffi.Pointer<ffi.Char> signers,
  ) {
    return _nt_keystore_create(
      result_port,
      storage,
      connection,
      signers,
    );
  }

  late final _nt_keystore_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('nt_keystore_create');
  late final _nt_keystore_create = _nt_keystore_createPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>)>();

  void nt_keystore_entries(
    int result_port,
    ffi.Pointer<ffi.Void> keystore,
  ) {
    return _nt_keystore_entries(
      result_port,
      keystore,
    );
  }

  late final _nt_keystore_entriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong, ffi.Pointer<ffi.Void>)>>('nt_keystore_entries');
  late final _nt_keystore_entries = _nt_keystore_entriesPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void nt_keystore_add_key(
    int result_port,
    ffi.Pointer<ffi.Void> keystore,
    ffi.Pointer<ffi.Char> signer,
    ffi.Pointer<ffi.Char> input,
  ) {
    return _nt_keystore_add_key(
      result_port,
      keystore,
      signer,
      input,
    );
  }

  late final _nt_keystore_add_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nt_keystore_add_key');
  late final _nt_keystore_add_key = _nt_keystore_add_keyPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void nt_keystore_add_keys(
    int result_port,
    ffi.Pointer<ffi.Void> keystore,
    ffi.Pointer<ffi.Char> signer,
    ffi.Pointer<ffi.Char> input,
  ) {
    return _nt_keystore_add_keys(
      result_port,
      keystore,
      signer,
      input,
    );
  }

  late final _nt_keystore_add_keysPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nt_keystore_add_keys');
  late final _nt_keystore_add_keys = _nt_keystore_add_keysPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void nt_keystore_update_key(
    int result_port,
    ffi.Pointer<ffi.Void> keystore,
    ffi.Pointer<ffi.Char> signer,
    ffi.Pointer<ffi.Char> input,
  ) {
    return _nt_keystore_update_key(
      result_port,
      keystore,
      signer,
      input,
    );
  }

  late final _nt_keystore_update_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nt_keystore_update_key');
  late final _nt_keystore_update_key = _nt_keystore_update_keyPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void nt_keystore_export_key(
    int result_port,
    ffi.Pointer<ffi.Void> keystore,
    ffi.Pointer<ffi.Char> signer,
    ffi.Pointer<ffi.Char> input,
  ) {
    return _nt_keystore_export_key(
      result_port,
      keystore,
      signer,
      input,
    );
  }

  late final _nt_keystore_export_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nt_keystore_export_key');
  late final _nt_keystore_export_key = _nt_keystore_export_keyPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void nt_keystore_get_public_keys(
    int result_port,
    ffi.Pointer<ffi.Void> keystore,
    ffi.Pointer<ffi.Char> signer,
    ffi.Pointer<ffi.Char> input,
  ) {
    return _nt_keystore_get_public_keys(
      result_port,
      keystore,
      signer,
      input,
    );
  }

  late final _nt_keystore_get_public_keysPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nt_keystore_get_public_keys');
  late final _nt_keystore_get_public_keys =
      _nt_keystore_get_public_keysPtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  void nt_keystore_encrypt(
    int result_port,
    ffi.Pointer<ffi.Void> keystore,
    ffi.Pointer<ffi.Char> signer,
    ffi.Pointer<ffi.Char> data,
    ffi.Pointer<ffi.Char> public_keys,
    ffi.Pointer<ffi.Char> algorithm,
    ffi.Pointer<ffi.Char> input,
  ) {
    return _nt_keystore_encrypt(
      result_port,
      keystore,
      signer,
      data,
      public_keys,
      algorithm,
      input,
    );
  }

  late final _nt_keystore_encryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nt_keystore_encrypt');
  late final _nt_keystore_encrypt = _nt_keystore_encryptPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void nt_keystore_decrypt(
    int result_port,
    ffi.Pointer<ffi.Void> keystore,
    ffi.Pointer<ffi.Char> signer,
    ffi.Pointer<ffi.Char> data,
    ffi.Pointer<ffi.Char> input,
  ) {
    return _nt_keystore_decrypt(
      result_port,
      keystore,
      signer,
      data,
      input,
    );
  }

  late final _nt_keystore_decryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nt_keystore_decrypt');
  late final _nt_keystore_decrypt = _nt_keystore_decryptPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void nt_keystore_sign(
    int result_port,
    ffi.Pointer<ffi.Void> keystore,
    ffi.Pointer<ffi.Char> signer,
    ffi.Pointer<ffi.Char> data,
    ffi.Pointer<ffi.Char> input,
    ffi.Pointer<ffi.Char> signature_id,
  ) {
    return _nt_keystore_sign(
      result_port,
      keystore,
      signer,
      data,
      input,
      signature_id,
    );
  }

  late final _nt_keystore_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nt_keystore_sign');
  late final _nt_keystore_sign = _nt_keystore_signPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void nt_keystore_sign_data(
    int result_port,
    ffi.Pointer<ffi.Void> keystore,
    ffi.Pointer<ffi.Char> signer,
    ffi.Pointer<ffi.Char> data,
    ffi.Pointer<ffi.Char> input,
    ffi.Pointer<ffi.Char> signature_id,
  ) {
    return _nt_keystore_sign_data(
      result_port,
      keystore,
      signer,
      data,
      input,
      signature_id,
    );
  }

  late final _nt_keystore_sign_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nt_keystore_sign_data');
  late final _nt_keystore_sign_data = _nt_keystore_sign_dataPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void nt_keystore_sign_data_raw(
    int result_port,
    ffi.Pointer<ffi.Void> keystore,
    ffi.Pointer<ffi.Char> signer,
    ffi.Pointer<ffi.Char> data,
    ffi.Pointer<ffi.Char> input,
    ffi.Pointer<ffi.Char> signature_id,
  ) {
    return _nt_keystore_sign_data_raw(
      result_port,
      keystore,
      signer,
      data,
      input,
      signature_id,
    );
  }

  late final _nt_keystore_sign_data_rawPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nt_keystore_sign_data_raw');
  late final _nt_keystore_sign_data_raw =
      _nt_keystore_sign_data_rawPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  void nt_keystore_remove_key(
    int result_port,
    ffi.Pointer<ffi.Void> keystore,
    ffi.Pointer<ffi.Char> public_key,
  ) {
    return _nt_keystore_remove_key(
      result_port,
      keystore,
      public_key,
    );
  }

  late final _nt_keystore_remove_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.LongLong, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('nt_keystore_remove_key');
  late final _nt_keystore_remove_key = _nt_keystore_remove_keyPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  void nt_keystore_remove_keys(
    int result_port,
    ffi.Pointer<ffi.Void> keystore,
    ffi.Pointer<ffi.Char> public_keys,
  ) {
    return _nt_keystore_remove_keys(
      result_port,
      keystore,
      public_keys,
    );
  }

  late final _nt_keystore_remove_keysPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.LongLong, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('nt_keystore_remove_keys');
  late final _nt_keystore_remove_keys = _nt_keystore_remove_keysPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> nt_keystore_is_password_cached(
    ffi.Pointer<ffi.Void> keystore,
    ffi.Pointer<ffi.Char> public_key,
    int duration,
  ) {
    return _nt_keystore_is_password_cached(
      keystore,
      public_key,
      duration,
    );
  }

  late final _nt_keystore_is_password_cachedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedLongLong)>>('nt_keystore_is_password_cached');
  late final _nt_keystore_is_password_cached =
      _nt_keystore_is_password_cachedPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, int)>();

  void nt_keystore_clear(
    int result_port,
    ffi.Pointer<ffi.Void> keystore,
  ) {
    return _nt_keystore_clear(
      result_port,
      keystore,
    );
  }

  late final _nt_keystore_clearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong, ffi.Pointer<ffi.Void>)>>('nt_keystore_clear');
  late final _nt_keystore_clear = _nt_keystore_clearPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void nt_keystore_reload(
    int result_port,
    ffi.Pointer<ffi.Void> keystore,
  ) {
    return _nt_keystore_reload(
      result_port,
      keystore,
    );
  }

  late final _nt_keystore_reloadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong, ffi.Pointer<ffi.Void>)>>('nt_keystore_reload');
  late final _nt_keystore_reload = _nt_keystore_reloadPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> nt_keystore_verify_data(
    ffi.Pointer<ffi.Void> connection,
    ffi.Pointer<ffi.Char> signers,
    ffi.Pointer<ffi.Char> data,
  ) {
    return _nt_keystore_verify_data(
      connection,
      signers,
      data,
    );
  }

  late final _nt_keystore_verify_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nt_keystore_verify_data');
  late final _nt_keystore_verify_data = _nt_keystore_verify_dataPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void nt_keystore_free_ptr(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _nt_keystore_free_ptr(
      ptr,
    );
  }

  late final _nt_keystore_free_ptrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'nt_keystore_free_ptr');
  late final _nt_keystore_free_ptr = _nt_keystore_free_ptrPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void nt_storage_impl_free_ptr(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _nt_storage_impl_free_ptr(
      ptr,
    );
  }

  late final _nt_storage_impl_free_ptrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'nt_storage_impl_free_ptr');
  late final _nt_storage_impl_free_ptr = _nt_storage_impl_free_ptrPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void nt_token_wallet_subscribe(
    int result_port,
    int on_balance_changed_port,
    int on_transactions_found_port,
    ffi.Pointer<ffi.Void> transport,
    ffi.Pointer<ffi.Char> transport_type,
    ffi.Pointer<ffi.Char> owner,
    ffi.Pointer<ffi.Char> root_token_contract,
  ) {
    return _nt_token_wallet_subscribe(
      result_port,
      on_balance_changed_port,
      on_transactions_found_port,
      transport,
      transport_type,
      owner,
      root_token_contract,
    );
  }

  late final _nt_token_wallet_subscribePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong,
              ffi.LongLong,
              ffi.LongLong,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nt_token_wallet_subscribe');
  late final _nt_token_wallet_subscribe =
      _nt_token_wallet_subscribePtr.asFunction<
          void Function(
              int,
              int,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  void nt_token_wallet_owner(
    int result_port,
    ffi.Pointer<ffi.Void> token_wallet,
  ) {
    return _nt_token_wallet_owner(
      result_port,
      token_wallet,
    );
  }

  late final _nt_token_wallet_ownerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong, ffi.Pointer<ffi.Void>)>>('nt_token_wallet_owner');
  late final _nt_token_wallet_owner = _nt_token_wallet_ownerPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void nt_token_wallet_address(
    int result_port,
    ffi.Pointer<ffi.Void> token_wallet,
  ) {
    return _nt_token_wallet_address(
      result_port,
      token_wallet,
    );
  }

  late final _nt_token_wallet_addressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong, ffi.Pointer<ffi.Void>)>>('nt_token_wallet_address');
  late final _nt_token_wallet_address = _nt_token_wallet_addressPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void nt_token_wallet_symbol(
    int result_port,
    ffi.Pointer<ffi.Void> token_wallet,
  ) {
    return _nt_token_wallet_symbol(
      result_port,
      token_wallet,
    );
  }

  late final _nt_token_wallet_symbolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong, ffi.Pointer<ffi.Void>)>>('nt_token_wallet_symbol');
  late final _nt_token_wallet_symbol = _nt_token_wallet_symbolPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void nt_token_wallet_version(
    int result_port,
    ffi.Pointer<ffi.Void> token_wallet,
  ) {
    return _nt_token_wallet_version(
      result_port,
      token_wallet,
    );
  }

  late final _nt_token_wallet_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong, ffi.Pointer<ffi.Void>)>>('nt_token_wallet_version');
  late final _nt_token_wallet_version = _nt_token_wallet_versionPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void nt_token_wallet_balance(
    int result_port,
    ffi.Pointer<ffi.Void> token_wallet,
  ) {
    return _nt_token_wallet_balance(
      result_port,
      token_wallet,
    );
  }

  late final _nt_token_wallet_balancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong, ffi.Pointer<ffi.Void>)>>('nt_token_wallet_balance');
  late final _nt_token_wallet_balance = _nt_token_wallet_balancePtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void nt_token_wallet_contract_state(
    int result_port,
    ffi.Pointer<ffi.Void> token_wallet,
  ) {
    return _nt_token_wallet_contract_state(
      result_port,
      token_wallet,
    );
  }

  late final _nt_token_wallet_contract_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.LongLong,
              ffi.Pointer<ffi.Void>)>>('nt_token_wallet_contract_state');
  late final _nt_token_wallet_contract_state =
      _nt_token_wallet_contract_statePtr
          .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void nt_token_wallet_prepare_transfer(
    int result_port,
    ffi.Pointer<ffi.Void> token_wallet,
    ffi.Pointer<ffi.Char> destination,
    ffi.Pointer<ffi.Char> tokens,
    int notify_receiver,
    ffi.Pointer<ffi.Char> payload,
  ) {
    return _nt_token_wallet_prepare_transfer(
      result_port,
      token_wallet,
      destination,
      tokens,
      notify_receiver,
      payload,
    );
  }

  late final _nt_token_wallet_prepare_transferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>)>>('nt_token_wallet_prepare_transfer');
  late final _nt_token_wallet_prepare_transfer =
      _nt_token_wallet_prepare_transferPtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  void nt_token_wallet_refresh(
    int result_port,
    ffi.Pointer<ffi.Void> token_wallet,
  ) {
    return _nt_token_wallet_refresh(
      result_port,
      token_wallet,
    );
  }

  late final _nt_token_wallet_refreshPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong, ffi.Pointer<ffi.Void>)>>('nt_token_wallet_refresh');
  late final _nt_token_wallet_refresh = _nt_token_wallet_refreshPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void nt_token_wallet_preload_transactions(
    int result_port,
    ffi.Pointer<ffi.Void> token_wallet,
    ffi.Pointer<ffi.Char> from_lt,
  ) {
    return _nt_token_wallet_preload_transactions(
      result_port,
      token_wallet,
      from_lt,
    );
  }

  late final _nt_token_wallet_preload_transactionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.LongLong, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('nt_token_wallet_preload_transactions');
  late final _nt_token_wallet_preload_transactions =
      _nt_token_wallet_preload_transactionsPtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  void nt_token_wallet_handle_block(
    int result_port,
    ffi.Pointer<ffi.Void> token_wallet,
    ffi.Pointer<ffi.Char> block,
  ) {
    return _nt_token_wallet_handle_block(
      result_port,
      token_wallet,
      block,
    );
  }

  late final _nt_token_wallet_handle_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.LongLong, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('nt_token_wallet_handle_block');
  late final _nt_token_wallet_handle_block =
      _nt_token_wallet_handle_blockPtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  void nt_get_token_root_details(
    int result_port,
    ffi.Pointer<ffi.Void> transport,
    ffi.Pointer<ffi.Char> transport_type,
    ffi.Pointer<ffi.Char> root_token_contract,
  ) {
    return _nt_get_token_root_details(
      result_port,
      transport,
      transport_type,
      root_token_contract,
    );
  }

  late final _nt_get_token_root_detailsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nt_get_token_root_details');
  late final _nt_get_token_root_details =
      _nt_get_token_root_detailsPtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  void nt_get_token_wallet_details(
    int result_port,
    ffi.Pointer<ffi.Void> transport,
    ffi.Pointer<ffi.Char> transport_type,
    ffi.Pointer<ffi.Char> token_wallet,
  ) {
    return _nt_get_token_wallet_details(
      result_port,
      transport,
      transport_type,
      token_wallet,
    );
  }

  late final _nt_get_token_wallet_detailsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nt_get_token_wallet_details');
  late final _nt_get_token_wallet_details =
      _nt_get_token_wallet_detailsPtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  void nt_get_token_root_details_from_token_wallet(
    int result_port,
    ffi.Pointer<ffi.Void> transport,
    ffi.Pointer<ffi.Char> transport_type,
    ffi.Pointer<ffi.Char> token_wallet_address,
  ) {
    return _nt_get_token_root_details_from_token_wallet(
      result_port,
      transport,
      transport_type,
      token_wallet_address,
    );
  }

  late final _nt_get_token_root_details_from_token_walletPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.LongLong, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>(
      'nt_get_token_root_details_from_token_wallet');
  late final _nt_get_token_root_details_from_token_wallet =
      _nt_get_token_root_details_from_token_walletPtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  void nt_token_wallet_free_ptr(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _nt_token_wallet_free_ptr(
      ptr,
    );
  }

  late final _nt_token_wallet_free_ptrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'nt_token_wallet_free_ptr');
  late final _nt_token_wallet_free_ptr = _nt_token_wallet_free_ptrPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void nt_ton_wallet_subscribe(
    int result_port,
    int on_message_sent_port,
    int on_message_expired_port,
    int on_state_changed_port,
    int on_transactions_found_port,
    ffi.Pointer<ffi.Void> transport,
    ffi.Pointer<ffi.Char> transport_type,
    int workchain,
    ffi.Pointer<ffi.Char> public_key,
    ffi.Pointer<ffi.Char> contract,
  ) {
    return _nt_ton_wallet_subscribe(
      result_port,
      on_message_sent_port,
      on_message_expired_port,
      on_state_changed_port,
      on_transactions_found_port,
      transport,
      transport_type,
      workchain,
      public_key,
      contract,
    );
  }

  late final _nt_ton_wallet_subscribePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong,
              ffi.LongLong,
              ffi.LongLong,
              ffi.LongLong,
              ffi.LongLong,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.SignedChar,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nt_ton_wallet_subscribe');
  late final _nt_ton_wallet_subscribe = _nt_ton_wallet_subscribePtr.asFunction<
      void Function(
          int,
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void nt_ton_wallet_subscribe_by_address(
    int result_port,
    int on_message_sent_port,
    int on_message_expired_port,
    int on_state_changed_port,
    int on_transactions_found_port,
    ffi.Pointer<ffi.Void> transport,
    ffi.Pointer<ffi.Char> transport_type,
    ffi.Pointer<ffi.Char> address,
  ) {
    return _nt_ton_wallet_subscribe_by_address(
      result_port,
      on_message_sent_port,
      on_message_expired_port,
      on_state_changed_port,
      on_transactions_found_port,
      transport,
      transport_type,
      address,
    );
  }

  late final _nt_ton_wallet_subscribe_by_addressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong,
              ffi.LongLong,
              ffi.LongLong,
              ffi.LongLong,
              ffi.LongLong,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nt_ton_wallet_subscribe_by_address');
  late final _nt_ton_wallet_subscribe_by_address =
      _nt_ton_wallet_subscribe_by_addressPtr.asFunction<
          void Function(int, int, int, int, int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void nt_ton_wallet_subscribe_by_existing(
    int result_port,
    int on_message_sent_port,
    int on_message_expired_port,
    int on_state_changed_port,
    int on_transactions_found_port,
    ffi.Pointer<ffi.Void> transport,
    ffi.Pointer<ffi.Char> transport_type,
    ffi.Pointer<ffi.Char> existing_wallet,
  ) {
    return _nt_ton_wallet_subscribe_by_existing(
      result_port,
      on_message_sent_port,
      on_message_expired_port,
      on_state_changed_port,
      on_transactions_found_port,
      transport,
      transport_type,
      existing_wallet,
    );
  }

  late final _nt_ton_wallet_subscribe_by_existingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong,
              ffi.LongLong,
              ffi.LongLong,
              ffi.LongLong,
              ffi.LongLong,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nt_ton_wallet_subscribe_by_existing');
  late final _nt_ton_wallet_subscribe_by_existing =
      _nt_ton_wallet_subscribe_by_existingPtr.asFunction<
          void Function(int, int, int, int, int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void nt_ton_wallet_workchain(
    int result_port,
    ffi.Pointer<ffi.Void> ton_wallet,
  ) {
    return _nt_ton_wallet_workchain(
      result_port,
      ton_wallet,
    );
  }

  late final _nt_ton_wallet_workchainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong, ffi.Pointer<ffi.Void>)>>('nt_ton_wallet_workchain');
  late final _nt_ton_wallet_workchain = _nt_ton_wallet_workchainPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void nt_ton_wallet_address(
    int result_port,
    ffi.Pointer<ffi.Void> ton_wallet,
  ) {
    return _nt_ton_wallet_address(
      result_port,
      ton_wallet,
    );
  }

  late final _nt_ton_wallet_addressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong, ffi.Pointer<ffi.Void>)>>('nt_ton_wallet_address');
  late final _nt_ton_wallet_address = _nt_ton_wallet_addressPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void nt_ton_wallet_public_key(
    int result_port,
    ffi.Pointer<ffi.Void> ton_wallet,
  ) {
    return _nt_ton_wallet_public_key(
      result_port,
      ton_wallet,
    );
  }

  late final _nt_ton_wallet_public_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.LongLong,
              ffi.Pointer<ffi.Void>)>>('nt_ton_wallet_public_key');
  late final _nt_ton_wallet_public_key = _nt_ton_wallet_public_keyPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void nt_ton_wallet_wallet_type(
    int result_port,
    ffi.Pointer<ffi.Void> ton_wallet,
  ) {
    return _nt_ton_wallet_wallet_type(
      result_port,
      ton_wallet,
    );
  }

  late final _nt_ton_wallet_wallet_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.LongLong,
              ffi.Pointer<ffi.Void>)>>('nt_ton_wallet_wallet_type');
  late final _nt_ton_wallet_wallet_type = _nt_ton_wallet_wallet_typePtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void nt_ton_wallet_contract_state(
    int result_port,
    ffi.Pointer<ffi.Void> ton_wallet,
  ) {
    return _nt_ton_wallet_contract_state(
      result_port,
      ton_wallet,
    );
  }

  late final _nt_ton_wallet_contract_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.LongLong,
              ffi.Pointer<ffi.Void>)>>('nt_ton_wallet_contract_state');
  late final _nt_ton_wallet_contract_state = _nt_ton_wallet_contract_statePtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void nt_ton_wallet_pending_transactions(
    int result_port,
    ffi.Pointer<ffi.Void> ton_wallet,
  ) {
    return _nt_ton_wallet_pending_transactions(
      result_port,
      ton_wallet,
    );
  }

  late final _nt_ton_wallet_pending_transactionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.LongLong,
              ffi.Pointer<ffi.Void>)>>('nt_ton_wallet_pending_transactions');
  late final _nt_ton_wallet_pending_transactions =
      _nt_ton_wallet_pending_transactionsPtr
          .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void nt_ton_wallet_polling_method(
    int result_port,
    ffi.Pointer<ffi.Void> ton_wallet,
  ) {
    return _nt_ton_wallet_polling_method(
      result_port,
      ton_wallet,
    );
  }

  late final _nt_ton_wallet_polling_methodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.LongLong,
              ffi.Pointer<ffi.Void>)>>('nt_ton_wallet_polling_method');
  late final _nt_ton_wallet_polling_method = _nt_ton_wallet_polling_methodPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void nt_ton_wallet_details(
    int result_port,
    ffi.Pointer<ffi.Void> ton_wallet,
  ) {
    return _nt_ton_wallet_details(
      result_port,
      ton_wallet,
    );
  }

  late final _nt_ton_wallet_detailsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong, ffi.Pointer<ffi.Void>)>>('nt_ton_wallet_details');
  late final _nt_ton_wallet_details = _nt_ton_wallet_detailsPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void nt_ton_wallet_unconfirmed_transactions(
    int result_port,
    ffi.Pointer<ffi.Void> ton_wallet,
  ) {
    return _nt_ton_wallet_unconfirmed_transactions(
      result_port,
      ton_wallet,
    );
  }

  late final _nt_ton_wallet_unconfirmed_transactionsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.LongLong, ffi.Pointer<ffi.Void>)>>(
      'nt_ton_wallet_unconfirmed_transactions');
  late final _nt_ton_wallet_unconfirmed_transactions =
      _nt_ton_wallet_unconfirmed_transactionsPtr
          .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void nt_ton_wallet_custodians(
    int result_port,
    ffi.Pointer<ffi.Void> ton_wallet,
  ) {
    return _nt_ton_wallet_custodians(
      result_port,
      ton_wallet,
    );
  }

  late final _nt_ton_wallet_custodiansPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.LongLong,
              ffi.Pointer<ffi.Void>)>>('nt_ton_wallet_custodians');
  late final _nt_ton_wallet_custodians = _nt_ton_wallet_custodiansPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void nt_ton_wallet_prepare_deploy(
    int result_port,
    ffi.Pointer<ffi.Void> ton_wallet,
    ffi.Pointer<ffi.Char> expiration,
  ) {
    return _nt_ton_wallet_prepare_deploy(
      result_port,
      ton_wallet,
      expiration,
    );
  }

  late final _nt_ton_wallet_prepare_deployPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.LongLong, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('nt_ton_wallet_prepare_deploy');
  late final _nt_ton_wallet_prepare_deploy =
      _nt_ton_wallet_prepare_deployPtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  void nt_ton_wallet_prepare_deploy_with_multiple_owners(
    int result_port,
    ffi.Pointer<ffi.Void> ton_wallet,
    ffi.Pointer<ffi.Char> expiration,
    ffi.Pointer<ffi.Char> custodians,
    int req_confirms,
  ) {
    return _nt_ton_wallet_prepare_deploy_with_multiple_owners(
      result_port,
      ton_wallet,
      expiration,
      custodians,
      req_confirms,
    );
  }

  late final _nt_ton_wallet_prepare_deploy_with_multiple_ownersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.LongLong,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.UnsignedChar)>>(
      'nt_ton_wallet_prepare_deploy_with_multiple_owners');
  late final _nt_ton_wallet_prepare_deploy_with_multiple_owners =
      _nt_ton_wallet_prepare_deploy_with_multiple_ownersPtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, int)>();

  void nt_ton_wallet_prepare_transfer(
    int result_port,
    ffi.Pointer<ffi.Void> ton_wallet,
    ffi.Pointer<ffi.Char> contract_state,
    ffi.Pointer<ffi.Char> public_key,
    ffi.Pointer<ffi.Char> destination,
    ffi.Pointer<ffi.Char> amount,
    int bounce,
    ffi.Pointer<ffi.Char> body,
    ffi.Pointer<ffi.Char> expiration,
  ) {
    return _nt_ton_wallet_prepare_transfer(
      result_port,
      ton_wallet,
      contract_state,
      public_key,
      destination,
      amount,
      bounce,
      body,
      expiration,
    );
  }

  late final _nt_ton_wallet_prepare_transferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nt_ton_wallet_prepare_transfer');
  late final _nt_ton_wallet_prepare_transfer =
      _nt_ton_wallet_prepare_transferPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  void nt_ton_wallet_prepare_confirm_transaction(
    int result_port,
    ffi.Pointer<ffi.Void> ton_wallet,
    ffi.Pointer<ffi.Char> contract_state,
    ffi.Pointer<ffi.Char> public_key,
    ffi.Pointer<ffi.Char> transaction_id,
    ffi.Pointer<ffi.Char> expiration,
  ) {
    return _nt_ton_wallet_prepare_confirm_transaction(
      result_port,
      ton_wallet,
      contract_state,
      public_key,
      transaction_id,
      expiration,
    );
  }

  late final _nt_ton_wallet_prepare_confirm_transactionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.LongLong,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>)>>(
      'nt_ton_wallet_prepare_confirm_transaction');
  late final _nt_ton_wallet_prepare_confirm_transaction =
      _nt_ton_wallet_prepare_confirm_transactionPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  void nt_ton_wallet_estimate_fees(
    int result_port,
    ffi.Pointer<ffi.Void> ton_wallet,
    ffi.Pointer<ffi.Char> signed_message,
  ) {
    return _nt_ton_wallet_estimate_fees(
      result_port,
      ton_wallet,
      signed_message,
    );
  }

  late final _nt_ton_wallet_estimate_feesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.LongLong, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('nt_ton_wallet_estimate_fees');
  late final _nt_ton_wallet_estimate_fees =
      _nt_ton_wallet_estimate_feesPtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  void nt_ton_wallet_send(
    int result_port,
    ffi.Pointer<ffi.Void> ton_wallet,
    ffi.Pointer<ffi.Char> signed_message,
  ) {
    return _nt_ton_wallet_send(
      result_port,
      ton_wallet,
      signed_message,
    );
  }

  late final _nt_ton_wallet_sendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.LongLong, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('nt_ton_wallet_send');
  late final _nt_ton_wallet_send = _nt_ton_wallet_sendPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  void nt_ton_wallet_refresh(
    int result_port,
    ffi.Pointer<ffi.Void> ton_wallet,
  ) {
    return _nt_ton_wallet_refresh(
      result_port,
      ton_wallet,
    );
  }

  late final _nt_ton_wallet_refreshPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong, ffi.Pointer<ffi.Void>)>>('nt_ton_wallet_refresh');
  late final _nt_ton_wallet_refresh = _nt_ton_wallet_refreshPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void nt_ton_wallet_preload_transactions(
    int result_port,
    ffi.Pointer<ffi.Void> ton_wallet,
    ffi.Pointer<ffi.Char> from_lt,
  ) {
    return _nt_ton_wallet_preload_transactions(
      result_port,
      ton_wallet,
      from_lt,
    );
  }

  late final _nt_ton_wallet_preload_transactionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.LongLong, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('nt_ton_wallet_preload_transactions');
  late final _nt_ton_wallet_preload_transactions =
      _nt_ton_wallet_preload_transactionsPtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  void nt_ton_wallet_handle_block(
    int result_port,
    ffi.Pointer<ffi.Void> ton_wallet,
    ffi.Pointer<ffi.Char> block,
  ) {
    return _nt_ton_wallet_handle_block(
      result_port,
      ton_wallet,
      block,
    );
  }

  late final _nt_ton_wallet_handle_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.LongLong, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('nt_ton_wallet_handle_block');
  late final _nt_ton_wallet_handle_block =
      _nt_ton_wallet_handle_blockPtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  void nt_find_existing_wallets(
    int result_port,
    ffi.Pointer<ffi.Void> transport,
    ffi.Pointer<ffi.Char> transport_type,
    ffi.Pointer<ffi.Char> public_key,
    int workchain_id,
    ffi.Pointer<ffi.Char> wallet_types,
  ) {
    return _nt_find_existing_wallets(
      result_port,
      transport,
      transport_type,
      public_key,
      workchain_id,
      wallet_types,
    );
  }

  late final _nt_find_existing_walletsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.SignedChar,
              ffi.Pointer<ffi.Char>)>>('nt_find_existing_wallets');
  late final _nt_find_existing_wallets =
      _nt_find_existing_walletsPtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  void nt_get_existing_wallet_info(
    int result_port,
    ffi.Pointer<ffi.Void> transport,
    ffi.Pointer<ffi.Char> transport_type,
    ffi.Pointer<ffi.Char> address,
  ) {
    return _nt_get_existing_wallet_info(
      result_port,
      transport,
      transport_type,
      address,
    );
  }

  late final _nt_get_existing_wallet_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nt_get_existing_wallet_info');
  late final _nt_get_existing_wallet_info =
      _nt_get_existing_wallet_infoPtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  void nt_get_wallet_custodians(
    int result_port,
    ffi.Pointer<ffi.Void> transport,
    ffi.Pointer<ffi.Char> transport_type,
    ffi.Pointer<ffi.Char> address,
  ) {
    return _nt_get_wallet_custodians(
      result_port,
      transport,
      transport_type,
      address,
    );
  }

  late final _nt_get_wallet_custodiansPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nt_get_wallet_custodians');
  late final _nt_get_wallet_custodians =
      _nt_get_wallet_custodiansPtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  void nt_ton_wallet_free_ptr(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _nt_ton_wallet_free_ptr(
      ptr,
    );
  }

  late final _nt_ton_wallet_free_ptrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'nt_ton_wallet_free_ptr');
  late final _nt_ton_wallet_free_ptr = _nt_ton_wallet_free_ptrPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void nt_unsigned_message_refresh_timeout(
    int result_port,
    ffi.Pointer<ffi.Void> unsigned_message,
  ) {
    return _nt_unsigned_message_refresh_timeout(
      result_port,
      unsigned_message,
    );
  }

  late final _nt_unsigned_message_refresh_timeoutPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.LongLong,
              ffi.Pointer<ffi.Void>)>>('nt_unsigned_message_refresh_timeout');
  late final _nt_unsigned_message_refresh_timeout =
      _nt_unsigned_message_refresh_timeoutPtr
          .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void nt_unsigned_message_expire_at(
    int result_port,
    ffi.Pointer<ffi.Void> unsigned_message,
  ) {
    return _nt_unsigned_message_expire_at(
      result_port,
      unsigned_message,
    );
  }

  late final _nt_unsigned_message_expire_atPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.LongLong,
              ffi.Pointer<ffi.Void>)>>('nt_unsigned_message_expire_at');
  late final _nt_unsigned_message_expire_at = _nt_unsigned_message_expire_atPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void nt_unsigned_message_hash(
    int result_port,
    ffi.Pointer<ffi.Void> unsigned_message,
  ) {
    return _nt_unsigned_message_hash(
      result_port,
      unsigned_message,
    );
  }

  late final _nt_unsigned_message_hashPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.LongLong,
              ffi.Pointer<ffi.Void>)>>('nt_unsigned_message_hash');
  late final _nt_unsigned_message_hash = _nt_unsigned_message_hashPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void nt_unsigned_message_sign(
    int result_port,
    ffi.Pointer<ffi.Void> unsigned_message,
    ffi.Pointer<ffi.Char> signature,
  ) {
    return _nt_unsigned_message_sign(
      result_port,
      unsigned_message,
      signature,
    );
  }

  late final _nt_unsigned_message_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.LongLong, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('nt_unsigned_message_sign');
  late final _nt_unsigned_message_sign =
      _nt_unsigned_message_signPtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> nt_verify_signature(
    ffi.Pointer<ffi.Char> public_key,
    ffi.Pointer<ffi.Char> data_hash,
    ffi.Pointer<ffi.Char> signature,
  ) {
    return _nt_verify_signature(
      public_key,
      data_hash,
      signature,
    );
  }

  late final _nt_verify_signaturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nt_verify_signature');
  late final _nt_verify_signature = _nt_verify_signaturePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void nt_unsigned_message_free_ptr(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _nt_unsigned_message_free_ptr(
      ptr,
    );
  }

  late final _nt_unsigned_message_free_ptrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'nt_unsigned_message_free_ptr');
  late final _nt_unsigned_message_free_ptr = _nt_unsigned_message_free_ptrPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> nt_generate_key(
    ffi.Pointer<ffi.Char> mnemonic_type,
  ) {
    return _nt_generate_key(
      mnemonic_type,
    );
  }

  late final _nt_generate_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('nt_generate_key');
  late final _nt_generate_key = _nt_generate_keyPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> nt_get_hints(
    ffi.Pointer<ffi.Char> input,
  ) {
    return _nt_get_hints(
      input,
    );
  }

  late final _nt_get_hintsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('nt_get_hints');
  late final _nt_get_hints = _nt_get_hintsPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> nt_derive_from_phrase(
    ffi.Pointer<ffi.Char> phrase,
    ffi.Pointer<ffi.Char> mnemonic_type,
  ) {
    return _nt_derive_from_phrase(
      phrase,
      mnemonic_type,
    );
  }

  late final _nt_derive_from_phrasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nt_derive_from_phrase');
  late final _nt_derive_from_phrase = _nt_derive_from_phrasePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void nt_external_resolve_request_with_string(
    ffi.Pointer<ffi.Void> tx,
    ffi.Pointer<ffi.Char> ok,
    ffi.Pointer<ffi.Char> err,
  ) {
    return _nt_external_resolve_request_with_string(
      tx,
      ok,
      err,
    );
  }

  late final _nt_external_resolve_request_with_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>)>>(
      'nt_external_resolve_request_with_string');
  late final _nt_external_resolve_request_with_string =
      _nt_external_resolve_request_with_stringPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  void nt_external_resolve_request_with_optional_string(
    ffi.Pointer<ffi.Void> tx,
    ffi.Pointer<ffi.Char> ok,
    ffi.Pointer<ffi.Char> err,
  ) {
    return _nt_external_resolve_request_with_optional_string(
      tx,
      ok,
      err,
    );
  }

  late final _nt_external_resolve_request_with_optional_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>)>>(
      'nt_external_resolve_request_with_optional_string');
  late final _nt_external_resolve_request_with_optional_string =
      _nt_external_resolve_request_with_optional_stringPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  void nt_external_resolve_request_with_unit(
    ffi.Pointer<ffi.Void> tx,
    ffi.Pointer<ffi.Char> err,
  ) {
    return _nt_external_resolve_request_with_unit(
      tx,
      err,
    );
  }

  late final _nt_external_resolve_request_with_unitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('nt_external_resolve_request_with_unit');
  late final _nt_external_resolve_request_with_unit =
      _nt_external_resolve_request_with_unitPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> nt_gql_connection_create(
    int is_local,
    int port,
  ) {
    return _nt_gql_connection_create(
      is_local,
      port,
    );
  }

  late final _nt_gql_connection_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.LongLong)>>('nt_gql_connection_create');
  late final _nt_gql_connection_create = _nt_gql_connection_createPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, int)>();

  ffi.Pointer<ffi.Char> nt_jrpc_connection_create(
    int port,
  ) {
    return _nt_jrpc_connection_create(
      port,
    );
  }

  late final _nt_jrpc_connection_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.LongLong)>>(
          'nt_jrpc_connection_create');
  late final _nt_jrpc_connection_create = _nt_jrpc_connection_createPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void nt_jrpc_connection_free_ptr(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _nt_jrpc_connection_free_ptr(
      ptr,
    );
  }

  late final _nt_jrpc_connection_free_ptrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'nt_jrpc_connection_free_ptr');
  late final _nt_jrpc_connection_free_ptr = _nt_jrpc_connection_free_ptrPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> nt_ledger_connection_create(
    int get_public_key_port,
    int sign_port,
  ) {
    return _nt_ledger_connection_create(
      get_public_key_port,
      sign_port,
    );
  }

  late final _nt_ledger_connection_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.LongLong, ffi.LongLong)>>('nt_ledger_connection_create');
  late final _nt_ledger_connection_create = _nt_ledger_connection_createPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, int)>();

  void nt_ledger_connection_free_ptr(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _nt_ledger_connection_free_ptr(
      ptr,
    );
  }

  late final _nt_ledger_connection_free_ptrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'nt_ledger_connection_free_ptr');
  late final _nt_ledger_connection_free_ptr = _nt_ledger_connection_free_ptrPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> nt_storage_create(
    int get_port,
    int set_port,
    int set_unchecked_port,
    int remove_port,
    int remove_unchecked_port,
  ) {
    return _nt_storage_create(
      get_port,
      set_port,
      set_unchecked_port,
      remove_port,
      remove_unchecked_port,
    );
  }

  late final _nt_storage_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.LongLong, ffi.LongLong,
              ffi.LongLong, ffi.LongLong, ffi.LongLong)>>('nt_storage_create');
  late final _nt_storage_create = _nt_storage_createPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, int, int, int, int)>();

  void nt_storage_free_ptr(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _nt_storage_free_ptr(
      ptr,
    );
  }

  late final _nt_storage_free_ptrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'nt_storage_free_ptr');
  late final _nt_storage_free_ptr = _nt_storage_free_ptrPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> nt_pack_std_smc_addr(
    int base64_url,
    ffi.Pointer<ffi.Char> addr,
    int bounceable,
  ) {
    return _nt_pack_std_smc_addr(
      base64_url,
      addr,
      bounceable,
    );
  }

  late final _nt_pack_std_smc_addrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('nt_pack_std_smc_addr');
  late final _nt_pack_std_smc_addr = _nt_pack_std_smc_addrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> nt_unpack_std_smc_addr(
    ffi.Pointer<ffi.Char> packed,
    int base64_url,
  ) {
    return _nt_unpack_std_smc_addr(
      packed,
      base64_url,
    );
  }

  late final _nt_unpack_std_smc_addrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('nt_unpack_std_smc_addr');
  late final _nt_unpack_std_smc_addr = _nt_unpack_std_smc_addrPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> nt_validate_address(
    ffi.Pointer<ffi.Char> address,
  ) {
    return _nt_validate_address(
      address,
    );
  }

  late final _nt_validate_addressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('nt_validate_address');
  late final _nt_validate_address = _nt_validate_addressPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> nt_repack_address(
    ffi.Pointer<ffi.Char> address,
  ) {
    return _nt_repack_address(
      address,
    );
  }

  late final _nt_repack_addressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('nt_repack_address');
  late final _nt_repack_address = _nt_repack_addressPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> nt_extract_public_key(
    ffi.Pointer<ffi.Char> boc,
  ) {
    return _nt_extract_public_key(
      boc,
    );
  }

  late final _nt_extract_public_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('nt_extract_public_key');
  late final _nt_extract_public_key = _nt_extract_public_keyPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> nt_code_to_tvc(
    ffi.Pointer<ffi.Char> code,
  ) {
    return _nt_code_to_tvc(
      code,
    );
  }

  late final _nt_code_to_tvcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('nt_code_to_tvc');
  late final _nt_code_to_tvc = _nt_code_to_tvcPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> nt_merge_tvc(
    ffi.Pointer<ffi.Char> code,
    ffi.Pointer<ffi.Char> data,
  ) {
    return _nt_merge_tvc(
      code,
      data,
    );
  }

  late final _nt_merge_tvcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('nt_merge_tvc');
  late final _nt_merge_tvc = _nt_merge_tvcPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> nt_split_tvc(
    ffi.Pointer<ffi.Char> tvc,
  ) {
    return _nt_split_tvc(
      tvc,
    );
  }

  late final _nt_split_tvcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('nt_split_tvc');
  late final _nt_split_tvc = _nt_split_tvcPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> nt_set_code_salt(
    ffi.Pointer<ffi.Char> code,
    ffi.Pointer<ffi.Char> salt,
  ) {
    return _nt_set_code_salt(
      code,
      salt,
    );
  }

  late final _nt_set_code_saltPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nt_set_code_salt');
  late final _nt_set_code_salt = _nt_set_code_saltPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> nt_get_code_salt(
    ffi.Pointer<ffi.Char> code,
  ) {
    return _nt_get_code_salt(
      code,
    );
  }

  late final _nt_get_code_saltPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('nt_get_code_salt');
  late final _nt_get_code_salt = _nt_get_code_saltPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> nt_check_public_key(
    ffi.Pointer<ffi.Char> public_key,
  ) {
    return _nt_check_public_key(
      public_key,
    );
  }

  late final _nt_check_public_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('nt_check_public_key');
  late final _nt_check_public_key = _nt_check_public_keyPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> nt_run_local(
    ffi.Pointer<ffi.Char> account_stuff_boc,
    ffi.Pointer<ffi.Char> contract_abi,
    ffi.Pointer<ffi.Char> method,
    ffi.Pointer<ffi.Char> input,
    int responsible,
  ) {
    return _nt_run_local(
      account_stuff_boc,
      contract_abi,
      method,
      input,
      responsible,
    );
  }

  late final _nt_run_localPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('nt_run_local');
  late final _nt_run_local = _nt_run_localPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int)>();

  ffi.Pointer<ffi.Char> nt_get_expected_address(
    ffi.Pointer<ffi.Char> tvc,
    ffi.Pointer<ffi.Char> contract_abi,
    int workchain_id,
    ffi.Pointer<ffi.Char> public_key,
    ffi.Pointer<ffi.Char> init_data,
  ) {
    return _nt_get_expected_address(
      tvc,
      contract_abi,
      workchain_id,
      public_key,
      init_data,
    );
  }

  late final _nt_get_expected_addressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.SignedChar,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nt_get_expected_address');
  late final _nt_get_expected_address = _nt_get_expected_addressPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> nt_encode_internal_input(
    ffi.Pointer<ffi.Char> contract_abi,
    ffi.Pointer<ffi.Char> method,
    ffi.Pointer<ffi.Char> input,
  ) {
    return _nt_encode_internal_input(
      contract_abi,
      method,
      input,
    );
  }

  late final _nt_encode_internal_inputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nt_encode_internal_input');
  late final _nt_encode_internal_input =
      _nt_encode_internal_inputPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> nt_create_external_message_without_signature(
    ffi.Pointer<ffi.Char> dst,
    ffi.Pointer<ffi.Char> contract_abi,
    ffi.Pointer<ffi.Char> method,
    ffi.Pointer<ffi.Char> state_init,
    ffi.Pointer<ffi.Char> input,
    int timeout,
  ) {
    return _nt_create_external_message_without_signature(
      dst,
      contract_abi,
      method,
      state_init,
      input,
      timeout,
    );
  }

  late final _nt_create_external_message_without_signaturePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.UnsignedInt)>>(
      'nt_create_external_message_without_signature');
  late final _nt_create_external_message_without_signature =
      _nt_create_external_message_without_signaturePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              int)>();

  ffi.Pointer<ffi.Char> nt_create_external_message(
    ffi.Pointer<ffi.Char> dst,
    ffi.Pointer<ffi.Char> contract_abi,
    ffi.Pointer<ffi.Char> method,
    ffi.Pointer<ffi.Char> state_init,
    ffi.Pointer<ffi.Char> input,
    ffi.Pointer<ffi.Char> public_key,
    int timeout,
  ) {
    return _nt_create_external_message(
      dst,
      contract_abi,
      method,
      state_init,
      input,
      public_key,
      timeout,
    );
  }

  late final _nt_create_external_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('nt_create_external_message');
  late final _nt_create_external_message =
      _nt_create_external_messagePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              int)>();

  ffi.Pointer<ffi.Char> nt_parse_known_payload(
    ffi.Pointer<ffi.Char> payload,
  ) {
    return _nt_parse_known_payload(
      payload,
    );
  }

  late final _nt_parse_known_payloadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('nt_parse_known_payload');
  late final _nt_parse_known_payload = _nt_parse_known_payloadPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> nt_decode_input(
    ffi.Pointer<ffi.Char> message_body,
    ffi.Pointer<ffi.Char> contract_abi,
    ffi.Pointer<ffi.Char> method,
    int internal,
  ) {
    return _nt_decode_input(
      message_body,
      contract_abi,
      method,
      internal,
    );
  }

  late final _nt_decode_inputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('nt_decode_input');
  late final _nt_decode_input = _nt_decode_inputPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> nt_decode_event(
    ffi.Pointer<ffi.Char> message_body,
    ffi.Pointer<ffi.Char> contract_abi,
    ffi.Pointer<ffi.Char> event,
  ) {
    return _nt_decode_event(
      message_body,
      contract_abi,
      event,
    );
  }

  late final _nt_decode_eventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nt_decode_event');
  late final _nt_decode_event = _nt_decode_eventPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> nt_decode_output(
    ffi.Pointer<ffi.Char> message_body,
    ffi.Pointer<ffi.Char> contract_abi,
    ffi.Pointer<ffi.Char> method,
  ) {
    return _nt_decode_output(
      message_body,
      contract_abi,
      method,
    );
  }

  late final _nt_decode_outputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nt_decode_output');
  late final _nt_decode_output = _nt_decode_outputPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> nt_decode_transaction(
    ffi.Pointer<ffi.Char> transaction,
    ffi.Pointer<ffi.Char> contract_abi,
    ffi.Pointer<ffi.Char> method,
  ) {
    return _nt_decode_transaction(
      transaction,
      contract_abi,
      method,
    );
  }

  late final _nt_decode_transactionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nt_decode_transaction');
  late final _nt_decode_transaction = _nt_decode_transactionPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> nt_decode_transaction_events(
    ffi.Pointer<ffi.Char> transaction,
    ffi.Pointer<ffi.Char> contract_abi,
  ) {
    return _nt_decode_transaction_events(
      transaction,
      contract_abi,
    );
  }

  late final _nt_decode_transaction_eventsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nt_decode_transaction_events');
  late final _nt_decode_transaction_events =
      _nt_decode_transaction_eventsPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> nt_get_boc_hash(
    ffi.Pointer<ffi.Char> boc,
  ) {
    return _nt_get_boc_hash(
      boc,
    );
  }

  late final _nt_get_boc_hashPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('nt_get_boc_hash');
  late final _nt_get_boc_hash = _nt_get_boc_hashPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> nt_pack_into_cell(
    ffi.Pointer<ffi.Char> params,
    ffi.Pointer<ffi.Char> tokens,
  ) {
    return _nt_pack_into_cell(
      params,
      tokens,
    );
  }

  late final _nt_pack_into_cellPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nt_pack_into_cell');
  late final _nt_pack_into_cell = _nt_pack_into_cellPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> nt_unpack_from_cell(
    ffi.Pointer<ffi.Char> params,
    ffi.Pointer<ffi.Char> boc,
    int allow_partial,
  ) {
    return _nt_unpack_from_cell(
      params,
      boc,
      allow_partial,
    );
  }

  late final _nt_unpack_from_cellPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>('nt_unpack_from_cell');
  late final _nt_unpack_from_cell = _nt_unpack_from_cellPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void nt_transport_get_contract_state(
    int result_port,
    ffi.Pointer<ffi.Void> transport,
    ffi.Pointer<ffi.Char> transport_type,
    ffi.Pointer<ffi.Char> address,
  ) {
    return _nt_transport_get_contract_state(
      result_port,
      transport,
      transport_type,
      address,
    );
  }

  late final _nt_transport_get_contract_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nt_transport_get_contract_state');
  late final _nt_transport_get_contract_state =
      _nt_transport_get_contract_statePtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  void nt_transport_get_full_contract_state(
    int result_port,
    ffi.Pointer<ffi.Void> transport,
    ffi.Pointer<ffi.Char> transport_type,
    ffi.Pointer<ffi.Char> address,
  ) {
    return _nt_transport_get_full_contract_state(
      result_port,
      transport,
      transport_type,
      address,
    );
  }

  late final _nt_transport_get_full_contract_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nt_transport_get_full_contract_state');
  late final _nt_transport_get_full_contract_state =
      _nt_transport_get_full_contract_statePtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  void nt_transport_get_accounts_by_code_hash(
    int result_port,
    ffi.Pointer<ffi.Void> transport,
    ffi.Pointer<ffi.Char> transport_type,
    ffi.Pointer<ffi.Char> code_hash,
    int limit,
    ffi.Pointer<ffi.Char> continuation,
  ) {
    return _nt_transport_get_accounts_by_code_hash(
      result_port,
      transport,
      transport_type,
      code_hash,
      limit,
      continuation,
    );
  }

  late final _nt_transport_get_accounts_by_code_hashPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.LongLong,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.UnsignedChar,
                  ffi.Pointer<ffi.Char>)>>(
      'nt_transport_get_accounts_by_code_hash');
  late final _nt_transport_get_accounts_by_code_hash =
      _nt_transport_get_accounts_by_code_hashPtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  void nt_transport_get_transactions(
    int result_port,
    ffi.Pointer<ffi.Void> transport,
    ffi.Pointer<ffi.Char> transport_type,
    ffi.Pointer<ffi.Char> address,
    ffi.Pointer<ffi.Char> from_lt,
    int limit,
  ) {
    return _nt_transport_get_transactions(
      result_port,
      transport,
      transport_type,
      address,
      from_lt,
      limit,
    );
  }

  late final _nt_transport_get_transactionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedChar)>>('nt_transport_get_transactions');
  late final _nt_transport_get_transactions =
      _nt_transport_get_transactionsPtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void nt_transport_get_transaction(
    int result_port,
    ffi.Pointer<ffi.Void> transport,
    ffi.Pointer<ffi.Char> transport_type,
    ffi.Pointer<ffi.Char> hash,
  ) {
    return _nt_transport_get_transaction(
      result_port,
      transport,
      transport_type,
      hash,
    );
  }

  late final _nt_transport_get_transactionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('nt_transport_get_transaction');
  late final _nt_transport_get_transaction =
      _nt_transport_get_transactionPtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  void nt_transport_get_signature_id(
    int result_port,
    ffi.Pointer<ffi.Void> transport,
    ffi.Pointer<ffi.Char> transport_type,
  ) {
    return _nt_transport_get_signature_id(
      result_port,
      transport,
      transport_type,
    );
  }

  late final _nt_transport_get_signature_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.LongLong, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('nt_transport_get_signature_id');
  late final _nt_transport_get_signature_id =
      _nt_transport_get_signature_idPtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  void nt_transport_get_network_id(
    int result_port,
    ffi.Pointer<ffi.Void> transport,
    ffi.Pointer<ffi.Char> transport_type,
  ) {
    return _nt_transport_get_network_id(
      result_port,
      transport,
      transport_type,
    );
  }

  late final _nt_transport_get_network_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.LongLong, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('nt_transport_get_network_id');
  late final _nt_transport_get_network_id =
      _nt_transport_get_network_idPtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> nt_gql_transport_create(
    ffi.Pointer<ffi.Void> gql_connection,
  ) {
    return _nt_gql_transport_create(
      gql_connection,
    );
  }

  late final _nt_gql_transport_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('nt_gql_transport_create');
  late final _nt_gql_transport_create = _nt_gql_transport_createPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  void nt_gql_transport_get_latest_block_id(
    int result_port,
    ffi.Pointer<ffi.Void> gql_transport,
    ffi.Pointer<ffi.Char> address,
  ) {
    return _nt_gql_transport_get_latest_block_id(
      result_port,
      gql_transport,
      address,
    );
  }

  late final _nt_gql_transport_get_latest_block_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.LongLong, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('nt_gql_transport_get_latest_block_id');
  late final _nt_gql_transport_get_latest_block_id =
      _nt_gql_transport_get_latest_block_idPtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  void nt_gql_transport_get_block(
    int result_port,
    ffi.Pointer<ffi.Void> gql_transport,
    ffi.Pointer<ffi.Char> id,
  ) {
    return _nt_gql_transport_get_block(
      result_port,
      gql_transport,
      id,
    );
  }

  late final _nt_gql_transport_get_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.LongLong, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('nt_gql_transport_get_block');
  late final _nt_gql_transport_get_block =
      _nt_gql_transport_get_blockPtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  void nt_gql_transport_wait_for_next_block_id(
    int result_port,
    ffi.Pointer<ffi.Void> gql_transport,
    ffi.Pointer<ffi.Char> current_block_id,
    ffi.Pointer<ffi.Char> address,
    int timeout,
  ) {
    return _nt_gql_transport_wait_for_next_block_id(
      result_port,
      gql_transport,
      current_block_id,
      address,
      timeout,
    );
  }

  late final _nt_gql_transport_wait_for_next_block_idPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.LongLong,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.UnsignedLongLong)>>(
      'nt_gql_transport_wait_for_next_block_id');
  late final _nt_gql_transport_wait_for_next_block_id =
      _nt_gql_transport_wait_for_next_block_idPtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, int)>();

  void nt_gql_connection_free_ptr(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _nt_gql_connection_free_ptr(
      ptr,
    );
  }

  late final _nt_gql_connection_free_ptrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'nt_gql_connection_free_ptr');
  late final _nt_gql_connection_free_ptr = _nt_gql_connection_free_ptrPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void nt_gql_transport_free_ptr(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _nt_gql_transport_free_ptr(
      ptr,
    );
  }

  late final _nt_gql_transport_free_ptrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'nt_gql_transport_free_ptr');
  late final _nt_gql_transport_free_ptr = _nt_gql_transport_free_ptrPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> nt_jrpc_transport_create(
    ffi.Pointer<ffi.Void> jrpc_connection,
  ) {
    return _nt_jrpc_transport_create(
      jrpc_connection,
    );
  }

  late final _nt_jrpc_transport_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('nt_jrpc_transport_create');
  late final _nt_jrpc_transport_create = _nt_jrpc_transport_createPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  void nt_jrpc_transport_free_ptr(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _nt_jrpc_transport_free_ptr(
      ptr,
    );
  }

  late final _nt_jrpc_transport_free_ptrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'nt_jrpc_transport_free_ptr');
  late final _nt_jrpc_transport_free_ptr = _nt_jrpc_transport_free_ptrPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final Bindings _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      get nt_channel_err_free_ptr => _library._nt_channel_err_free_ptrPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      get nt_channel_option_free_ptr => _library._nt_channel_option_free_ptrPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      get nt_channel_result_option_free_ptr =>
          _library._nt_channel_result_option_free_ptrPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      get nt_channel_result_unit_free_ptr =>
          _library._nt_channel_result_unit_free_ptrPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      get nt_accounts_storage_free_ptr =>
          _library._nt_accounts_storage_free_ptrPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      get nt_generic_contract_free_ptr =>
          _library._nt_generic_contract_free_ptrPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      get nt_keystore_free_ptr => _library._nt_keystore_free_ptrPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      get nt_storage_impl_free_ptr => _library._nt_storage_impl_free_ptrPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      get nt_token_wallet_free_ptr => _library._nt_token_wallet_free_ptrPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      get nt_ton_wallet_free_ptr => _library._nt_ton_wallet_free_ptrPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      get nt_unsigned_message_free_ptr =>
          _library._nt_unsigned_message_free_ptrPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      get nt_jrpc_connection_free_ptr =>
          _library._nt_jrpc_connection_free_ptrPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      get nt_ledger_connection_free_ptr =>
          _library._nt_ledger_connection_free_ptrPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      get nt_storage_free_ptr => _library._nt_storage_free_ptrPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      get nt_gql_connection_free_ptr => _library._nt_gql_connection_free_ptrPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      get nt_gql_transport_free_ptr => _library._nt_gql_transport_free_ptrPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      get nt_jrpc_transport_free_ptr => _library._nt_jrpc_transport_free_ptrPtr;
}
